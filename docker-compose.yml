version: "3.8"

services:
  drone-server:
    image: drone/drone:2.17.0
    container_name: drone-server
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DRONE_SERVER_HOST=localhost
      - DRONE_SERVER_PROTO=http
      - DRONE_SERVER_PROXY_PROTO=https
      - DRONE_SERVER_PROXY_HOST=${DRONE_SERVER_HOST}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_COOKIE_SECRET=${DRONE_COOKIE_SECRET}
      - DRONE_COOKIE_TIMEOUT=720h
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}
      - DRONE_LOGS_DEBUG=true
      - DRONE_LOGS_TEXT=true
      - DRONE_LOGS_PRETTY=true
      - DRONE_LOGS_COLOR=true
      - DRONE_CRON_DISABLED=true
      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgres://postgres:postgres@db:5432/drone?sslmode=disable
      - DRONE_REDIS_CONNECTION=redis://redis-server:6379

  drone-runner:
    image: drone/drone-runner-docker:1.8.3
    container_name: drone-runner
    environment:
      - DRONE_RPC_HOST=proxy
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_TMATE_ENABLED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - proxy

  redis-server:
    container_name: drone-redis-cache
    image: redis:7.0.11

  proxy:
    image: haproxy
    container_name: drone-haproxy
    ports:
      - "8080:80" # 8080 should be used with ngrok
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - drone-server

  db:
    image: postgres:13.11
    container_name: drone-postgres-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=drone
    volumes:
      - ./postgres-data:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
